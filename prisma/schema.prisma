// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    Purchase       Purchase[]
    StaticPurchase StaticPurchase[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Purchase {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    description String?
    userId      String
    status      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    payment     Payment?
    paymentId   String? // Chave estrangeira para o modelo Payment
}

model StaticPurchase {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    description String?
    userId      String
    status      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    payments    Payment[]
}

model Payment {
    id             String    @id @default(cuid())
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    id_invoice_pix Int       @unique
    valor          Decimal   @db.Decimal(10, 2)
    vencimento     DateTime?
    id_cobrador    String
    nome_cobrador  String
    brcode         String
    status         String
    criacao        DateTime
    qrcode         String    @db.Text
    tx_id          String

    purchase         Purchase?       @relation(fields: [purchaseId], references: [id])
    purchaseId       String?         @unique // Chave estrangeira para o modelo Purchase
    StaticPurchase   StaticPurchase? @relation(fields: [staticPurchaseId], references: [id])
    staticPurchaseId String?
}
